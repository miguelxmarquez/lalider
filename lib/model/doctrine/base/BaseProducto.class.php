<?php

/**
 * BaseProducto
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $code
 * @property string $productRef
 * @property string $name
 * @property string $unit
 * @property string $currencySymbol
 * @property string $description
 * @property integer $idBrand
 * @property string $brand
 * @property integer $idCategory
 * @property string $categoryName
 * @property integer $idSubcategory
 * @property string $subcategoryName
 * @property integer $idLine
 * @property string $lineName
 * @property string $supplierName
 * @property float $price
 * @property float $tax
 * @property float $discountPrice
 * @property boolean $state
 * 
 * @method integer  getId()              Returns the current record's "id" value
 * @method string   getCode()            Returns the current record's "code" value
 * @method string   getProductRef()      Returns the current record's "productRef" value
 * @method string   getName()            Returns the current record's "name" value
 * @method string   getUnit()            Returns the current record's "unit" value
 * @method string   getCurrencySymbol()  Returns the current record's "currencySymbol" value
 * @method string   getDescription()     Returns the current record's "description" value
 * @method integer  getIdBrand()         Returns the current record's "idBrand" value
 * @method string   getBrand()           Returns the current record's "brand" value
 * @method integer  getIdCategory()      Returns the current record's "idCategory" value
 * @method string   getCategoryName()    Returns the current record's "categoryName" value
 * @method integer  getIdSubcategory()   Returns the current record's "idSubcategory" value
 * @method string   getSubcategoryName() Returns the current record's "subcategoryName" value
 * @method integer  getIdLine()          Returns the current record's "idLine" value
 * @method string   getLineName()        Returns the current record's "lineName" value
 * @method string   getSupplierName()    Returns the current record's "supplierName" value
 * @method float    getPrice()           Returns the current record's "price" value
 * @method float    getTax()             Returns the current record's "tax" value
 * @method float    getDiscountPrice()   Returns the current record's "discountPrice" value
 * @method boolean  getState()           Returns the current record's "state" value
 * @method Producto setId()              Sets the current record's "id" value
 * @method Producto setCode()            Sets the current record's "code" value
 * @method Producto setProductRef()      Sets the current record's "productRef" value
 * @method Producto setName()            Sets the current record's "name" value
 * @method Producto setUnit()            Sets the current record's "unit" value
 * @method Producto setCurrencySymbol()  Sets the current record's "currencySymbol" value
 * @method Producto setDescription()     Sets the current record's "description" value
 * @method Producto setIdBrand()         Sets the current record's "idBrand" value
 * @method Producto setBrand()           Sets the current record's "brand" value
 * @method Producto setIdCategory()      Sets the current record's "idCategory" value
 * @method Producto setCategoryName()    Sets the current record's "categoryName" value
 * @method Producto setIdSubcategory()   Sets the current record's "idSubcategory" value
 * @method Producto setSubcategoryName() Sets the current record's "subcategoryName" value
 * @method Producto setIdLine()          Sets the current record's "idLine" value
 * @method Producto setLineName()        Sets the current record's "lineName" value
 * @method Producto setSupplierName()    Sets the current record's "supplierName" value
 * @method Producto setPrice()           Sets the current record's "price" value
 * @method Producto setTax()             Sets the current record's "tax" value
 * @method Producto setDiscountPrice()   Sets the current record's "discountPrice" value
 * @method Producto setState()           Sets the current record's "state" value
 * 
 * @package    lalider
 * @subpackage model
 * @author     Miguel Marquez
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProducto extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('Producto');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('code', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('productRef', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('unit', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('currencySymbol', 'string', 5, array(
             'type' => 'string',
             'length' => 5,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('idBrand', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('brand', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('idCategory', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('categoryName', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('idSubcategory', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('subcategoryName', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('idLine', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('lineName', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('supplierName', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('price', 'float', 10, array(
             'type' => 'float',
             'length' => 10,
             ));
        $this->hasColumn('tax', 'float', 10, array(
             'type' => 'float',
             'length' => 10,
             ));
        $this->hasColumn('discountPrice', 'float', 10, array(
             'type' => 'float',
             'length' => 10,
             ));
        $this->hasColumn('state', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'created_at',
              'type' => 'timestamp',
              'format' => 'Y-m-d H:i:s',
              'options' => 
              array(
              'notnull' => false,
              'required' => false,
              ),
             ),
             'updated' => 
             array(
              'name' => 'updated_at',
              'type' => 'timestamp',
              'format' => 'Y-m-d H:i:s',
              'options' => 
              array(
              'notnull' => false,
              'required' => false,
              ),
             ),
             ));
        $this->actAs($timestampable0);
    }
}