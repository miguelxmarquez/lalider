<?php

/**
 * BaseCartera
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $idCustomer
 * @property integer $invoiceNumber
 * @property float $totalValue
 * @property float $balance
 * @property float $taxValue
 * @property timestamp $createDate
 * @property timestamp $dueDate
 * @property Cliente $Cliente
 * 
 * @method integer   getIdCustomer()    Returns the current record's "idCustomer" value
 * @method integer   getInvoiceNumber() Returns the current record's "invoiceNumber" value
 * @method float     getTotalValue()    Returns the current record's "totalValue" value
 * @method float     getBalance()       Returns the current record's "balance" value
 * @method float     getTaxValue()      Returns the current record's "taxValue" value
 * @method timestamp getCreateDate()    Returns the current record's "createDate" value
 * @method timestamp getDueDate()       Returns the current record's "dueDate" value
 * @method Cliente   getCliente()       Returns the current record's "Cliente" value
 * @method Cartera   setIdCustomer()    Sets the current record's "idCustomer" value
 * @method Cartera   setInvoiceNumber() Sets the current record's "invoiceNumber" value
 * @method Cartera   setTotalValue()    Sets the current record's "totalValue" value
 * @method Cartera   setBalance()       Sets the current record's "balance" value
 * @method Cartera   setTaxValue()      Sets the current record's "taxValue" value
 * @method Cartera   setCreateDate()    Sets the current record's "createDate" value
 * @method Cartera   setDueDate()       Sets the current record's "dueDate" value
 * @method Cartera   setCliente()       Sets the current record's "Cliente" value
 * 
 * @package    lalider
 * @subpackage model
 * @author     Miguel Marquez
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCartera extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('Cartera');
        $this->hasColumn('idCustomer', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('invoiceNumber', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('totalValue', 'float', 10, array(
             'type' => 'float',
             'length' => 10,
             ));
        $this->hasColumn('balance', 'float', 10, array(
             'type' => 'float',
             'length' => 10,
             ));
        $this->hasColumn('taxValue', 'float', 10, array(
             'type' => 'float',
             'length' => 10,
             ));
        $this->hasColumn('createDate', 'timestamp', null, array(
             'type' => 'timestamp',
             'format' => 'Y-m-d H:i:s',
             ));
        $this->hasColumn('dueDate', 'timestamp', null, array(
             'type' => 'timestamp',
             'format' => 'Y-m-d H:i:s',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Cliente', array(
             'local' => 'idCustomer',
             'foreign' => 'idCustomer'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'created_at',
              'type' => 'timestamp',
              'format' => 'Y-m-d H:i:s',
              'options' => 
              array(
              'notnull' => false,
              'required' => false,
              ),
             ),
             'updated' => 
             array(
              'name' => 'updated_at',
              'type' => 'timestamp',
              'format' => 'Y-m-d H:i:s',
              'options' => 
              array(
              'notnull' => false,
              'required' => false,
              ),
             ),
             ));
        $this->actAs($timestampable0);
    }
}